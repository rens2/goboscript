{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"goboscript","text":"<p>goboscript is a text-based programming language which compiles to Scratch. It allows you to write Scratch projects in text, and compile it into a .sb3 file - which can be opened in the Scratch editor, TurboWarp or be uploaded to the Scratch website.</p> <p>goboscript allows you to create advanced Scratch projects with ease, you can use any text editor, use a version control system such as git. You can refactor your code using search and replace. Text code can be copy pasted, which allows you to easily reuse code or share it with others. goboscript syntax is concise and easy to read.</p> <p>goboscript allows you to integrate external tooling and workflows, such as using a script to generate costumes for a text rendering engine. Or loading in images into lists.</p> <p>goboscript has a powerful macro system - similar to Rust's macro system. This allows you to write macros to generate code.</p> <p>goboscript is more than just an 1:1 mapping of Scratch blocks to text, it also has additional features like local variables for procedures (custom blocks).</p> <p>goboscript also performs optimizations, detects problems and unused code.</p> goboscript Scratch"},{"location":"configuration/","title":"Configuration","text":"<p>goboscript uses a <code>goboscript.toml</code> configuration file to store project-specific configuration.</p>"},{"location":"configuration/#turbowarp-options","title":"Turbowarp options","text":"<p>goboscript can generate a turbowarp configuration comment inside the Stage. https://docs.turbowarp.org/advanced-settings</p>"},{"location":"configuration/#frame-rate","title":"Frame Rate","text":"<pre><code>frame_rate = 60\n</code></pre>"},{"location":"configuration/#max-clones","title":"Max Clones","text":""},{"location":"configuration/#default","title":"Default","text":"<pre><code>max_clones = 300\n</code></pre>"},{"location":"configuration/#infinite-clones","title":"Infinite Clones","text":"<pre><code>max_clones = inf\n</code></pre>"},{"location":"configuration/#no-miscellaneous-limits","title":"No Miscellaneous Limits","text":"<pre><code>no_miscellaneous_limits = true\n</code></pre>"},{"location":"configuration/#no-sprite-fencing","title":"No Sprite Fencing","text":"<pre><code>no_sprite_fencing = true\n</code></pre>"},{"location":"configuration/#frame-interpolation","title":"Frame Interpolation","text":"<pre><code>frame_interpolation = true\n</code></pre>"},{"location":"configuration/#high-quality-pen","title":"High Quality Pen","text":"<pre><code>high_quality_pen = true\n</code></pre>"},{"location":"configuration/#stage-width-height","title":"Stage Width &amp; Height","text":"<pre><code>stage_width = 640\nstage_height = 480\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":"<p>The goboscript compiler is a command-line program. You can create a new project using the <code>new</code> command. (run <code>goboscript new --help</code> for more information)</p>"},{"location":"getting-started/#create-a-new-project","title":"Create a new project","text":"<p>Create a new folder, and make sure that your working-directory is set to that folder.</p> <pre><code>goboscript new\n</code></pre> <p>This will create a new project with the following structure:</p> <pre><code>.\n\u251c\u2500\u2500 blank.svg\n\u251c\u2500\u2500 main.gs\n\u251c\u2500\u2500 stage.gs\n\u2514\u2500\u2500 goboscript.toml\n</code></pre> <p>Depending on what options you chose, it might create a <code>goboscript.toml</code> configuration file.</p> <p>Each <code>.gs</code> file holds the code for a sprite, the name of the sprite is the name of the file without the <code>.gs</code> extension.</p> <p><code>stage.gs</code> holds the code for the Stage. Scratch does not allow you to name a sprite <code>Stage</code>, so creating a file with the name <code>Stage.gs</code> is invalid. As goboscript uses <code>stage.gs</code> for the Stage, you also cannot name a sprite <code>stage</code> (in lowercase).</p> <p><code>blank.svg</code> is a blank costume. You can see that both the main sprite and the Stage have the line:</p> <pre><code>costumes \"blank.svg\";\n</code></pre> <p>This is used to add a costume to a sprite (or the Stage), see language/costumes for more information.</p>"},{"location":"getting-started/#compile-the-project","title":"Compile the project","text":"<p>To compile the project, run the following command:</p> <pre><code>goboscript build\n</code></pre> <p>This will compile the project into a <code>.sb3</code> file. The <code>.sb3</code> file will be placed in the project directory. It will have the same name as the project directory.</p> <p>Run <code>goboscript build --help</code> for more information.</p>"},{"location":"install/","title":"Install","text":""},{"location":"install/#install-from-source","title":"Install from source","text":"<p>You will need <code>git</code>, and the rust toolchain installed.</p> <pre><code>git clone https://github.com/aspizu/goboscript\ncd goboscript\ncargo install --path .\n</code></pre> <p>To update the installation:</p> <pre><code>cd goboscript\ngit pull\ncargo install --path .\n</code></pre>"},{"location":"editor-integration/sublime-text/","title":"Sublime Text","text":""},{"location":"editor-integration/sublime-text/#sublime-text","title":"Sublime Text","text":"<p>The Sublime Text extension provides syntax highlighting.</p>"},{"location":"editor-integration/sublime-text/#install-from-source","title":"Install from source","text":"<p>in Sublime Text, click <code>Preferences &gt; Browse Packages...</code> to open up the Packages folder, and then copy <code>editors/sublime/goboscript.sublime-syntax</code> into the Packages folder</p>"},{"location":"editor-integration/turbowarp-desktop/","title":"TurboWarp Desktop","text":""},{"location":"editor-integration/turbowarp-desktop/#instant-project-reload","title":"Instant Project Reload","text":"<p>This will add a keyboard shortcut to instantly reload the project in TurboWarp Desktop using Ctrl+B</p> <p>Open the user data folder using:  <code>Settings</code> &gt; <code>Desktop Settings</code> &gt; <code>Open User Data</code></p> <p>Create a file called <code>userscript.js</code> and add the following code:</p> <pre><code>window.addEventListener('keyup', async (event) =&gt; {\n  if (!(event.key === 'b' &amp;&amp; event.ctrlKey)) return\n  event.preventDefault()\n  const id = await EditorPreload.getInitialFile()\n  if (id === null) return\n  const file = await EditorPreload.getFile(id)\n  await vm.loadProject(file.data)\n})\n</code></pre> <p>Restart TurboWarp Desktop including all open windows.</p> <p>Thanks to GarboMuffin for this code.</p>"},{"location":"editor-integration/vscode/","title":"Visual Studio Code","text":""},{"location":"editor-integration/vscode/#visual-studio-code","title":"Visual Studio Code","text":"<p>The VSCode extension provides code snippets and syntax highlighting.</p>"},{"location":"editor-integration/vscode/#install-from-source","title":"Install from source","text":"<p>You will need <code>npm</code> installed.</p> <pre><code># Inside the root of the goboscript git repository:\ncd editors/code\nnpm install\nnpm run package\n</code></pre> <p>This will output a <code>goboscript.vsix</code> file in the <code>editors/code</code> directory. You can install it by pressing Ctrl+Shift+P and typing <code>Extensions: Install from VSIX...</code>.</p>"},{"location":"editor-integration/vscode/#configure-build-task","title":"Configure Build Task","text":"<p>You can configure the goboscript build task to get diagnostics in vscode.</p> <p>Add to <code>.vscode/tasks.json</code>:</p> <pre><code>{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"type\": \"goboscript-build\",\n      \"problemMatcher\": [\"$goboscript\"],\n      \"group\": {\n        \"kind\": \"build\",\n        \"isDefault\": true\n      },\n      \"label\": \"Build .sb3\"\n    }\n  ]\n}\n</code></pre> <p>Either press Ctrl+Shift+B or run <code>Tasks: Run Task</code> and select <code>Build .sb3</code>.</p>"},{"location":"language/blocks/","title":"Blocks","text":"<p>The general syntax for blocks is:</p> <pre><code>block_name arg1, arg2;\n</code></pre>"},{"location":"language/control-flow/","title":"Control Flow","text":""},{"location":"language/control-flow/#repeat-n-times","title":"repeat n times","text":"<pre><code>repeat n {\n    # code\n}\n</code></pre>"},{"location":"language/control-flow/#repeat-until-condition","title":"repeat until condition","text":"<pre><code>until condition {\n    # code\n}\n</code></pre>"},{"location":"language/control-flow/#forever-loop","title":"forever loop","text":"<pre><code>forever {\n    # code\n}\n</code></pre>"},{"location":"language/control-flow/#if","title":"if","text":"<pre><code>if condition {\n    # code\n}\n</code></pre>"},{"location":"language/control-flow/#if-else","title":"if else","text":"<pre><code>if condition {\n    # code\n}\nelse {\n    # code\n}\n</code></pre>"},{"location":"language/control-flow/#if-elif","title":"if elif","text":"<pre><code>if condition {\n    # code\n}\nelif condition {\n    # code\n}\n</code></pre>"},{"location":"language/control-flow/#if-elif-else","title":"if elif else","text":"<pre><code>if condition {\n    # code\n}\nelif condition {\n    # code\n}\nelse {\n    # code\n}\n</code></pre>"},{"location":"language/costumes/","title":"Costumes","text":"<p>Costumes can be added to a sprite by refering to its path relative to the project directory.</p> <pre><code>costumes \"path/to/costume.svg\";\n</code></pre> <p>You can list multiple costumes by separating them with a comma.</p> <pre><code>costumes \"path/to/costume1.svg\", \"path/to/costume2.svg\";\n</code></pre> <p>It supports globs, so you can include all <code>.svg</code> files in a directory by using the <code>*</code> wildcard.</p> <pre><code>costumes \"path/to/costumes/*.svg\";\n</code></pre> <p>The name of the costume will be the name of the file without the extension.</p> <p>You can change the name of the costume by using the <code>as</code> keyword.</p> <pre><code>costumes \"path/to/costume.svg\" as \"new name\";\n</code></pre> <p>Costumes are ordered in the order they are listed in the <code>costumes</code> statement.</p> <p>Costumes included from globs are sorted alphabetically.</p>"},{"location":"language/custom-blocks/","title":"Custom Blocks","text":"<p>Custom blocks are called procedures.</p> <pre><code>proc my_procedure arg1, arg2 {\n    # code\n}\n</code></pre>"},{"location":"language/custom-blocks/#arguments","title":"Arguments","text":"<p>Use arguments by prefixing <code>$</code> to the argument name.</p> <pre><code>proc my_procedure arg1, arg2 {\n    say $arg1;\n}\n</code></pre>"},{"location":"language/custom-blocks/#calling-custom-blocks","title":"Calling custom blocks","text":"<pre><code>my_procedure arg1, arg2;\n</code></pre>"},{"location":"language/enums/","title":"Enums","text":"<p>Enums are a way to define a set of incrementing integers.</p> <pre><code>enum Direction {\n    North, #    0\n    East,  #    1\n    South, #    2\n    West   #    3\n}\n</code></pre>"},{"location":"language/enums/#get-enum-value","title":"Get enum value","text":"<pre><code>say Direction.North;\n</code></pre>"},{"location":"language/enums/#use-enums-as-a-way-to-emulate-structs","title":"Use enums as a way to emulate structs","text":"<pre><code>enum Person {\n    Name,\n    Age,\n    Gender\n}\n\ndelete persons;\nsay \"persons[index].Name = \" &amp; persons[index + Person.Name];\nsay \"persons[index].Age = \" &amp; persons[index + Person.Age];\nsay \"persons[index].Gender = \" &amp; persons[index + Person.Gender];\n</code></pre>"},{"location":"language/hat-blocks/","title":"Hat Blocks","text":""},{"location":"language/hat-blocks/#when-green-flag-clicked","title":"When Green Flag Clicked","text":"<pre><code>onflag {\n    # code\n}\n</code></pre>"},{"location":"language/hat-blocks/#when-key-pressed","title":"When Key Pressed","text":"<pre><code>onkey \"enter\" {\n   # code \n}\n</code></pre>"},{"location":"language/hat-blocks/#when-this-sprite-clicked","title":"When This Sprite Clicked","text":"<pre><code>onclick {\n    # code\n}\n</code></pre>"},{"location":"language/hat-blocks/#when-backdrop-switches-to","title":"When Backdrop Switches To","text":"<pre><code>onbackdrop \"backdrop\" {\n    # code\n}\n</code></pre>"},{"location":"language/hat-blocks/#when-loudness","title":"When Loudness &gt;","text":"<pre><code>onloudness &gt; 100 {\n    # code\n}\n</code></pre>"},{"location":"language/hat-blocks/#when-timer","title":"When Timer &gt;","text":"<pre><code>ontimer &gt; 100 {\n    # code\n}\n</code></pre>"},{"location":"language/hat-blocks/#when-i-start-as-a-clone","title":"When I Start As A Clone","text":"<pre><code>onclone {\n    # code\n}\n</code></pre>"},{"location":"language/hat-blocks/#when-i-receive-message","title":"When I Receive Message","text":"<pre><code>on \"message name\" {\n    # code\n}\n</code></pre>"},{"location":"language/lists/","title":"Lists","text":"<p>The same rules apply to lists as they do to variables. You can declare a list for all sprites in <code>stage.gs</code>, for this sprite only in the sprite's <code>.gs</code> file. There are no local lists.</p>"},{"location":"language/lists/#delete-all-items-from-a-list","title":"Delete all items from a list","text":"<p>This statement is considered the declaration of a list.</p> <pre><code>delete list;\n</code></pre>"},{"location":"language/lists/#delete-item-at-index-from-a-list","title":"Delete item at index from a list","text":"<pre><code>delete list[index];\n</code></pre>"},{"location":"language/lists/#delete-last-item-of-list","title":"Delete last item of list","text":"<pre><code>delete list[\"last\"];\n</code></pre>"},{"location":"language/lists/#add-item-to-list","title":"Add item to list","text":"<pre><code>add item to list;\n</code></pre>"},{"location":"language/lists/#insert-item-at-index-in-list","title":"Insert item at index in list","text":"<pre><code>insert item at list[index];\n</code></pre>"},{"location":"language/lists/#replace-item-at-index-in-list","title":"Replace item at index in list","text":"<pre><code>list[index] = item;\n</code></pre>"},{"location":"language/lists/#apply-operator-to-item-at-index-in-list","title":"Apply operator to item at index in list","text":"<pre><code>list[index] += 1;\nlist[index] -= 1;\nlist[index] *= 1;\nlist[index] /= 1;\nlist[index] // = 1; # Floor Division\nlist[index] %= 1;\nlist[index] &amp;= \"suffix\";\n</code></pre>"},{"location":"language/lists/#get-item-at-index-from-list","title":"Get item at index from list","text":"<pre><code>say list[index];\n</code></pre>"},{"location":"language/lists/#get-last-item-of-list","title":"Get last item of list","text":"<pre><code>say list[\"last\"];\n</code></pre>"},{"location":"language/lists/#get-length-of-list","title":"Get length of list","text":"<pre><code>say length list;\n</code></pre>"},{"location":"language/lists/#get-index-of-item-in-list","title":"Get index of item in list","text":"<p>TODO</p>"},{"location":"language/lists/#check-if-list-contains-item","title":"Check if list contains item","text":"<pre><code>say item in list;\n</code></pre>"},{"location":"language/lists/#show-list-monitor","title":"Show list monitor","text":"<pre><code>show list;\n</code></pre>"},{"location":"language/lists/#hide-list-monitor","title":"Hide list monitor","text":"<pre><code>hide list;\n</code></pre>"},{"location":"language/motion/","title":"Motion","text":""},{"location":"language/motion/#move-n-steps","title":"Move n steps","text":"<pre><code>move 10;\n</code></pre> <p>\u21ba</p>"},{"location":"language/motion/#turn-n-degrees","title":"Turn \u21bb n degrees","text":"<pre><code>turn_right 15;\n</code></pre>"},{"location":"language/motion/#turn-n-degrees_1","title":"Turn \u21ba n degrees","text":"<pre><code>turn_left 15;\n</code></pre>"},{"location":"language/motion/#go-to","title":"Go to","text":""},{"location":"language/motion/#go-to-random-position","title":"Go to random position","text":"<pre><code>goto_random_position;\n</code></pre>"},{"location":"language/motion/#go-to-mouse-pointer","title":"Go to mouse-pointer","text":"<pre><code>goto_mouse_pointer;\n</code></pre>"},{"location":"language/motion/#go-to-sprite","title":"Go to sprite","text":"<p>This will make your sprite go to the position of another sprite named \"gobo\".</p> <pre><code>goto \"gobo\";\n</code></pre>"},{"location":"language/motion/#go-to-x-y","title":"Go to x y","text":"<pre><code>goto 100, 140;\n</code></pre>"},{"location":"language/motion/#glide-n-seconds-to","title":"Glide n seconds to","text":""},{"location":"language/motion/#glide-n-seconds-to-random-position","title":"Glide n seconds to random position","text":"<pre><code>glide_to_random_position 2;\n</code></pre>"},{"location":"language/motion/#glide-n-seconds-to-mouse-pointer","title":"Glide n seconds to mouse-pointer","text":"<pre><code>glide_to_mouse_pointer 2;\n</code></pre>"},{"location":"language/motion/#glide-n-seconds-to-sprite","title":"Glide n seconds to sprite","text":"<p>This will make your sprite glide to the position of another sprite named \"gobo\".</p> <pre><code>glide \"dango\", 2;\n</code></pre>"},{"location":"language/motion/#glide-n-seconds-to-x-y","title":"Glide n seconds to x y","text":"<p>The first two values provide the x and y coordinates. The third value is the amount of seconds it will take to glide there.</p> <pre><code>glide 100, 140, 2;\n</code></pre>"},{"location":"language/motion/#point-in-direction-n","title":"Point in direction n","text":"<pre><code>point_in_direction 90;\n</code></pre>"},{"location":"language/motion/#point-towards","title":"Point towards","text":""},{"location":"language/motion/#point-towards-mouse-pointer","title":"Point towards mouse-pointer","text":"<pre><code>point_towards_mouse_pointer;\n</code></pre>"},{"location":"language/motion/#point-towards-random-direction","title":"Point towards random direction","text":"<pre><code> point_towards_random_direction;\n ```\n\n ### Point towards sprite\n\n ```goboscript\n point_towards \"gobo\";\n ```\n\n ## Change x by n\n\n  ```goboscript\nchange_x 10;\n ```\n\n## Set x to n\n\n  ```goboscript\nset_x 0;\n ```\n\n ## Change y by n\n\n  ```goboscript\nchange_y 10;\n ```\n\n## Set y to n\n\n  ```goboscript\nset_y 0;\n ```\n\n## If on edge, bounce\n\n```goboscript\nif_on_edge_bounce;\n</code></pre>"},{"location":"language/motion/#set-rotation-style","title":"Set rotation style","text":""},{"location":"language/motion/#set-rotation-style-left-right","title":"Set rotation style left-right","text":"<pre><code>set_rotation_style_left_right;\n</code></pre>"},{"location":"language/motion/#set-rotation-style-dont-rotate","title":"Set rotation style don't rotate","text":"<pre><code>set_rotation_style_do_not_rotate;\n</code></pre>"},{"location":"language/motion/#set-rotation-style-all-around","title":"Set rotation style all around","text":"<pre><code>set_rotation_style_all_around;\n</code></pre>"},{"location":"language/motion/#reporter-blocks","title":"Reporter blocks","text":""},{"location":"language/motion/#x-position","title":"x position","text":"<pre><code>x_position()\n</code></pre>"},{"location":"language/motion/#y-position","title":"y position","text":"<pre><code>y_position()\n</code></pre>"},{"location":"language/motion/#direction","title":"direction","text":"<pre><code>direction()\n</code></pre>"},{"location":"language/reporters/","title":"Reporters","text":"<p>The general syntax for reporters is:</p> <pre><code>reporter_name(arg1, arg2)\n</code></pre>"},{"location":"language/syntax/","title":"Syntax","text":"<p>goboscript has a syntax inspired from languages such as C, Rust, and Python.</p>"},{"location":"language/syntax/#comments","title":"Comments","text":"<pre><code># single-line comments are the only option.\n</code></pre>"},{"location":"language/syntax/#whitespace-indentation","title":"Whitespace &amp; Indentation","text":"<p>Whitespace &amp; indentation has no semantic significance.</p>"},{"location":"language/syntax/#numbers","title":"Numbers","text":"<pre><code>0b111 # Binary:      8\n0xFF  # Hexadecimal: 255\n0o777 # Octal:       511\n1024  # Decimal:     1024\n3.141 # Float:       3.141\n</code></pre>"},{"location":"language/syntax/#strings","title":"Strings","text":"<pre><code>\"Hello, World!\"\n\"Hello, \\\"World\\\"!\"\n\"\\u1234\" # Unicode escape\n\"\\n\" # Newline\n\"\\t\" # Tab\n</code></pre>"},{"location":"language/syntax/#booleans","title":"Booleans","text":"<p><code>true</code> is replaced with <code>1</code> during compilation.</p> <p><code>false</code> is replaced with <code>0</code> during compilation.</p>"},{"location":"language/syntax/#operators","title":"Operators","text":"Operator Description <code>+</code> Addition <code>-</code> Subtraction / Unary Minus <code>*</code> Multiplication <code>/</code> Division <code>//</code> Floor Division <code>%</code> Modulo <code>&amp;</code> Join <code>==</code> Equal <code>!=</code> Not equal <code>&lt;</code> Less than <code>&lt;=</code> Less than or equal to <code>&gt;</code> Greater than <code>&gt;=</code> Greater than or equal to <code>in</code> Contains <code>&amp;</code> Join <code>not</code> Not <code>and</code> And <code>or</code> Or"},{"location":"language/syntax/#mathematical-operators","title":"Mathematical operators","text":"Operator Description <code>round</code> Round <code>abs</code> Absolute value <code>floor</code> Floor <code>ceil</code> Ceil <code>sqrt</code> Square root <code>sin</code> Sine <code>cos</code> Cosine <code>tan</code> Tangent <code>asin</code> Arc sine <code>acos</code> Arc cosine <code>atan</code> Arc tangent <code>ln</code> Natural logarithm <code>log</code> Logarithm <code>antiln</code> e ^ <code>antilog</code> 10 ^"},{"location":"language/variables/","title":"Variables","text":""},{"location":"language/variables/#variables-for-all-sprites","title":"Variables for all sprites","text":"<p>To declare a variable for all sprites, assign to it in <code>stage.gs</code>.</p> <pre><code>onflag {\n    pi = 3.14159265359;\n}\n</code></pre>"},{"location":"language/variables/#variables-for-this-sprite-only","title":"Variables for this sprite only","text":"<p>To declare a variable for this sprite only, assign to it in the sprite's <code>.gs</code> file.</p> <pre><code>onflag {\n    x = 0;\n}\n</code></pre>"},{"location":"language/variables/#local-variables-for-a-procedure-only","title":"Local variables (for a procedure only)","text":"<p>Local variables is a feature of goboscript, which lets you define a variable which can only be used inside a procedure and is not accessible outside of it.</p> <pre><code>proc my_procedure {\n    local x = 0;\n    x = x + 1;\n}\n</code></pre> <p>In the compiled Scratch project, the variable <code>x</code> will be named as <code>my_procedure.x</code>.</p> <p>Note</p> <p>Local variables will have unexpected behavior if the procedure is recursive.</p>"},{"location":"language/variables/#set-variable","title":"Set variable","text":"<pre><code>x = 10;\n</code></pre>"},{"location":"language/variables/#change-variable","title":"Change variable","text":"<pre><code>x += 1;\n</code></pre>"},{"location":"language/variables/#change-variables-using-a-operator","title":"Change variables using a operator","text":"<pre><code>x += 1;\nx -= 1;\nx *= 2;\nx /= 2;\nx //= 2; # Floor Division\nx %= 2;\nx &amp;= \"str\";\nx++; # Increment by 1\nx--; # Decrement by 1\n</code></pre> <p>The <code>-=</code> statement is implemented using the change variable block.</p>"}]}