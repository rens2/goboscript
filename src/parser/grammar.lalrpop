use lalrpop_util::ParseError;
use logos::Span;
use smol_str::SmolStr;

use crate::{
    ast::*,
    blocks::*,
    diagnostic::{Diagnostic, DiagnosticKind},
    lexer::token::Token,
};

grammar<'a>(sprite: &'a mut Sprite);

pub Sprite = Declr*;

Costume: () = {
    <l:@L> <name:STR> <r:@R> <alias:(AS <STR>)?> => {
        sprite.costumes.push(Costume::new(name, l..r, alias));
    }
}

Declr: () = {
    COSTUMES Comma<Costume> ";" => {},
    <w:NOWARP?> PROC <l:@L> <n:NAME> <r:@R> <a:SpannedComma<NAME>> <b:Stmts> => {
        sprite.procs.insert(n.clone(), Proc::new(n.clone(), l..r, a, b, w.is_none()));
    },
    <l:@L> ONFLAG <r:@R> <b:Stmts> => {
        sprite.events.push(EventDetail::OnFlag.to_event(l..r, b));
    },
    <l:@L> ONKEY <r:@R> <kl:@L> <key:STR> <kr:@R> <b:Stmts> => {
        sprite.events.push(EventDetail::OnKey { key, span: kl..kr }.to_event(l..r, b));
    },
    <l:@L> ONCLICK <r:@R> <b:Stmts> => {
        sprite.events.push(EventDetail::OnClick.to_event(l..r, b));
    },
    <l:@L> ONBACKDROP <r:@R> <kl:@L> <backdrop:STR> <kr:@R> <b:Stmts> => {
        sprite.events.push(EventDetail::OnBackdrop { backdrop, span: kl..kr }.to_event(l..r, b));
    },
    <l:@L> ONLOUDNESS <r:@R> ">" <value:Expr> <b:Stmts> => {
        sprite.events.push(EventDetail::OnLoudnessGt { value }.to_event(l..r, b));
    },
    <l:@L> ONTIMER <r:@R> ">" <value:Expr> <b:Stmts> => {
        sprite.events.push(EventDetail::OnTimerGt { value }.to_event(l..r, b));
    },
    ON <l:@L> <k:STR> <r:@R> <b:Stmts> => {
        sprite.on_messages.insert(k.clone(), OnMessage::new(k, l..r, b));
    },
    <l:@L> ONCLONE <r:@R> <b:Stmts> => {
        sprite.events.push(EventDetail::OnClone.to_event(l..r, b));
    },
    ENUM <l:@L> <name:NAME> <r:@R> "{" <variants:SpannedComma<NAME>> "}" => {
        sprite.enums.insert(name.clone(), Enum::new(name, l..r, variants));
    }
}

Stmts: Stmts = "{" <Stmt*> "}";

Stmt: Stmt = {
    <If>,
    REPEAT <times:Expr> <body:Stmts> => Stmt::Repeat { times, body },
    <l:@L> FOREVER <r:@R> <body:Stmts> => Stmt::Forever { body, span: l..r },
    UNTIL <cond:Expr> <body:Stmts> => Stmt::Until { cond, body },
    LOCAL <l:@L> <name:NAME> <r:@R> "=" <value:Expr> ";" => {
        Stmt::SetVar { name: name.clone(), span: l..r, value, is_local: true }
    },
    <l:@L> <name:NAME> <r:@R> "=" <value:Expr> ";" => {
        if !sprite.vars.contains_key(&name) {
            sprite.vars.insert(name.clone(), Var::new(name.clone(), l..r, None));
        }
        Stmt::SetVar { name: name.clone(), span: l..r, value, is_local: false }
    },
    <l:@L> <name:NAME> <r:@R> "++" ";" => Stmt::ChangeVar { name, span: l..r, value: Expr::Int(1).into() },
    <l:@L> <name:NAME> <r:@R> "--" ";" => Stmt::ChangeVar { name, span: l..r, value: Expr::Int(-1).into() },
    <l:@L> <name:NAME> <r:@R> "+=" <value:Expr> ";" => Stmt::ChangeVar { name, span: l..r, value },
    <l:@L> <name:NAME> <r:@R> "-=" <value:Expr> ";" => Stmt::ChangeVar { name,               span: l..r, value: BinOp::Sub .to_expr(Expr::Int(0).into(), value).into()},
    <l:@L> <name:NAME> <r:@R> "*=" <value:Expr> ";" => Stmt::SetVar { name: name.clone(), span: l..r, value: BinOp::Mul .to_expr(Expr::Name { name: name.clone(), span: l..r }.into(), value).into(), is_local: false },
    <l:@L> <name:NAME> <r:@R> "/=" <value:Expr> ";" => Stmt::SetVar { name: name.clone(), span: l..r, value: BinOp::Div .to_expr(Expr::Name { name: name.clone(), span: l..r }.into(), value).into(), is_local: false },
    <l:@L> <name:NAME> <r:@R> "//=" <value:Expr> ";" => Stmt::SetVar { name: name.clone(), span: l..r, value: BinOp::FloorDiv .to_expr(Expr::Name { name: name.clone(), span: l..r }.into(), value).into(), is_local: false },
    <l:@L> <name:NAME> <r:@R> "%=" <value:Expr> ";" => Stmt::SetVar { name: name.clone(), span: l..r, value: BinOp::Mod .to_expr(Expr::Name { name: name.clone(), span: l..r }.into(), value).into(), is_local: false },
    <l:@L> <name:NAME> <r:@R> "&=" <value:Expr> ";" => Stmt::SetVar { name: name.clone(), span: l..r, value: BinOp::Join.to_expr(Expr::Name { name: name.clone(), span: l..r }.into(), value).into(), is_local: false },
    SHOW <l:@L> <name:NAME> <r:@R> ";" => Stmt::Show { name, span: l..r },
    HIDE <l:@L> <name:NAME> <r:@R> ";" => Stmt::Hide { name, span: l..r },
    <l:@L> SHOW <r:@R> ";" => Stmt::Block { block: Block::Show, span: l..r, args: vec![] },
    <l:@L> HIDE <r:@R> ";" => Stmt::Block { block: Block::Hide, span: l..r, args: vec![] },
    ADD <value:Expr> TO <l:@L> <name:NAME> <r:@R> ";" => Stmt::ListAdd { name, span: l..r, value },
    DELETE <l:@L> <name:NAME> <r:@R> ";" => {
        if !sprite.lists.contains_key(&name) {
            sprite.lists.insert(name.clone(), List::new(name.clone(), l..r, Default::default()));
        }
        Stmt::ListDeleteAll { name, span: l..r }
    },
    DELETE <l:@L> <name:NAME> <r:@R> "[" <index:Expr> "]" ";" => Stmt::ListDelete { name, span: l..r, index },
    INSERT <value:Expr> AT <l:@L> <name:NAME> <r:@R> "[" <index:Expr> "]" ";" => Stmt::ListInsert { name, span: l..r, index, value },
    <l:@L> <name:NAME> <r:@R> "[" <index:Expr> "]" "=" <value:Expr> ";" => Stmt::ListSet { name, span: l..r, index, value },
    <l:@L> <name:NAME> <r:@R> "[" <index:Expr> "]" "+=" <value:Expr> ";" => Stmt::ListChange { op: BinOp::Add,  name, span: l..r, index, value },
    <l:@L> <name:NAME> <r:@R> "[" <index:Expr> "]" "++" ";" => Stmt::ListChange { op: BinOp::Add,  name, span: l..r, index, value: Expr::Int(1).into() },
    <l:@L> <name:NAME> <r:@R> "[" <index:Expr> "]" "--" ";" => Stmt::ListChange { op: BinOp::Add,  name, span: l..r, index, value: Expr::Int(-1).into() },
    <l:@L> <name:NAME> <r:@R> "[" <index:Expr> "]" "-=" <value:Expr> ";" => Stmt::ListChange { op: BinOp::Sub,  name, span: l..r, index, value },
    <l:@L> <name:NAME> <r:@R> "[" <index:Expr> "]" "*=" <value:Expr> ";" => Stmt::ListChange { op: BinOp::Mul,  name, span: l..r, index, value },
    <l:@L> <name:NAME> <r:@R> "[" <index:Expr> "]" "/=" <value:Expr> ";" => Stmt::ListChange { op: BinOp::Div,  name, span: l..r, index, value },
    <l:@L> <name:NAME> <r:@R> "[" <index:Expr> "]" "//=" <value:Expr> ";" => Stmt::ListChange { op: BinOp::FloorDiv,  name, span: l..r, index, value },
    <l:@L> <name:NAME> <r:@R> "[" <index:Expr> "]" "%=" <value:Expr> ";" => Stmt::ListChange { op: BinOp::Mod,  name, span: l..r, index, value },
    <l:@L> <name:NAME> <r:@R> "[" <index:Expr> "]" "&=" <value:Expr> ";" => Stmt::ListChange { op: BinOp::Join, name, span: l..r, index, value },
    <l:@L> <name:NAME> <r:@R> <args:Exprs> ";" => match Block::from_shape(&name, args.len()) {
        Some(block) => Stmt::Block { block, span: l..r, args },
        None => Stmt::ProcCall { name, span: l..r, args },
    }
}

If: Stmt = {
    IF <cond:Expr> <if_body:Stmts> => Stmt::Branch { cond, if_body, else_body: Default::default() },
    IF <cond:Expr> <if_body:Stmts> ELSE <else_body:Stmts> => Stmt::Branch { cond, if_body, else_body },
    IF <cond:Expr> <if_body:Stmts> <else_body:Elif> => Stmt::Branch { cond, if_body, else_body: vec![else_body] },
}

Elif: Stmt = {
    ELIF <cond:Expr> <body:Stmts> => Stmt::Branch { cond, if_body: body, else_body: Default::default() },
    ELIF <cond:Expr> <body:Stmts> <else_body:Elif> => Stmt::Branch { cond, if_body: body, else_body: vec![else_body] },
    ELIF <cond:Expr> <body:Stmts> ELSE <else_body:Stmts> => Stmt::Branch { cond, if_body: body, else_body },
}

Expr: Rrc<Expr> = {
    #[precedence(level="1")]
    Term,
    #[precedence(level="2")] #[assoc(side="right")]
    "-"     <expr:Expr> => UnOp::Minus  .to_expr(expr).into(),
    NOT     <expr:Expr> => UnOp::Not    .to_expr(expr).into(),
    LENGTH  <expr:Expr> => UnOp::Length .to_expr(expr).into(),
    ROUND   <expr:Expr> => UnOp::Round  .to_expr(expr).into(),
    ABS     <expr:Expr> => UnOp::Abs    .to_expr(expr).into(),
    FLOOR   <expr:Expr> => UnOp::Floor  .to_expr(expr).into(),
    CEIL    <expr:Expr> => UnOp::Ceil   .to_expr(expr).into(),
    SQRT    <expr:Expr> => UnOp::Sqrt   .to_expr(expr).into(),
    SIN     <expr:Expr> => UnOp::Sin    .to_expr(expr).into(),
    COS     <expr:Expr> => UnOp::Cos    .to_expr(expr).into(),
    TAN     <expr:Expr> => UnOp::Tan    .to_expr(expr).into(),
    ASIN    <expr:Expr> => UnOp::Asin   .to_expr(expr).into(),
    ACOS    <expr:Expr> => UnOp::Acos   .to_expr(expr).into(),
    ATAN    <expr:Expr> => UnOp::Atan   .to_expr(expr).into(),
    LN      <expr:Expr> => UnOp::Ln     .to_expr(expr).into(),
    LOG     <expr:Expr> => UnOp::Log    .to_expr(expr).into(),
    ANTILN  <expr:Expr> => UnOp::AntiLn .to_expr(expr).into(),
    ANTILOG <expr:Expr> => UnOp::AntiLog.to_expr(expr).into(),
    #[precedence(level="3")] #[assoc(side="left")]
    <lhs:Expr> "*"  <rhs:Expr> => BinOp::Mul.to_expr(lhs, rhs).into(),
    <lhs:Expr> "/"  <rhs:Expr> => BinOp::Div.to_expr(lhs, rhs).into(),
    <lhs:Expr> "//"  <rhs:Expr> => BinOp::FloorDiv.to_expr(lhs, rhs).into(),
    <lhs:Expr> "%"  <rhs:Expr> => BinOp::Mod.to_expr(lhs, rhs).into(),
    #[precedence(level="4")] #[assoc(side="left")]
    <lhs:Expr> "+"  <rhs:Expr> => BinOp::Add.to_expr(lhs, rhs).into(),
    <lhs:Expr> "-"  <rhs:Expr> => BinOp::Sub.to_expr(lhs, rhs).into(),
    #[precedence(level="5")] #[assoc(side="left")]
    <lhs:Expr> "<"  <rhs:Expr> => BinOp::Lt.to_expr(lhs, rhs).into(),
    <lhs:Expr> "<=" <rhs:Expr> => BinOp::Le.to_expr(lhs, rhs).into(),
    <lhs:Expr> ">"  <rhs:Expr> => BinOp::Gt.to_expr(lhs, rhs).into(),
    <lhs:Expr> ">=" <rhs:Expr> => BinOp::Ge.to_expr(lhs, rhs).into(),
    #[precedence(level="6")] #[assoc(side="right")]
    <lhs:Expr> "&"  <rhs:Expr> => BinOp::Join.to_expr(lhs, rhs).into(),
    #[precedence(level="7")] #[assoc(side="left")]
    <lhs:Expr>  IN  <rhs:Expr> => BinOp::In.to_expr(lhs, rhs).into(),
    <lhs:Expr> "==" <rhs:Expr> => BinOp::Eq.to_expr(lhs, rhs).into(),
    <lhs:Expr> "!=" <rhs:Expr> => BinOp::Ne.to_expr(lhs, rhs).into(),
    #[precedence(level="8")] #[assoc(side="left")]
    <lhs:Expr> AND  <rhs:Expr> => BinOp::And.to_expr(lhs, rhs).into(),
    #[precedence(level="9")] #[assoc(side="left")]
    <lhs:Expr>  OR  <rhs:Expr> => BinOp::Or.to_expr(lhs, rhs).into(),
}

Term: Rrc<Expr> = {
    "(" <Expr> ")",
    TRUE          => Expr::Int(1).into(),
    FALSE         => Expr::Int(0).into(),
    <value:INT>   => Expr::Int(value).into(),
    <value:HEX>   => Expr::Int(value).into(),
    <value:OCT>   => Expr::Int(value).into(),
    <value:BIN>   => Expr::Int(value).into(),
    <value:FLOAT> => Expr::Float(value).into(),
    <value:STR>   => Expr::Str(value).into(),
    <l:@L> <name:NAME> <r:@R> => Expr::Name { name, span: l..r }.into(),
    <l:@L> <name:ARG> <r:@R> => Expr::Arg { name, span: l..r }.into(),
    <l:@L> <name:NAME> <r:@R> "(" <args:Exprs> ")" =>? match Repr::from_shape(&name, args.len()) {
        Some(repr) => Ok(Expr::Repr { repr, span: l..r, args }.into()),
        None => Err(ParseError::User { error: DiagnosticKind::UnrecognizedReporter(name).to_diagnostic(l..r) }),
    },
    <l:@L> <e:Term> "[" <i:Expr> "]" <r:@R> => BinOp::Of.to_expr(e, i).into(),
    <nl:@L> <enum_name:NAME> <nr:@R> "." <vl:@L> <variant_name:NAME> <vr:@R> =>
        Expr::EnumVariant {
            enum_name,
            enum_span: nl..nr,
            variant_name,
            variant_span: vl..vr
        }.into(),
}

Exprs: Vec<Rrc<Expr>> = <Comma<Expr>>;

SpannedComma<T>: Vec<(T, Span)> = {
    <mut v:SpannedComma<T>> "," <l:@L> <e:T> <r:@R> => {
        v.push((e, l..r));
        v
    },
    <l:@L> <e:T> <r:@R> => vec![(e, l..r)],
    => vec![],
}

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => {
        if let Some(e) = e {
            v.push(e);
        }
        v
    }
}

extern {
    type Location = usize;
    type Error = Diagnostic;
    enum Token {
        NAME           => Token::Name(<SmolStr>),
        ARG            => Token::Arg(<SmolStr>),
        MAC            => Token::Mac(<SmolStr>),
        BIN            => Token::Bin(<i64>),
        OCT            => Token::Oct(<i64>),
        INT            => Token::Int(<i64>),
        HEX            => Token::Hex(<i64>),
        FLOAT          => Token::Float(<f64>),
        STR            => Token::Str(<SmolStr>),
        COSTUMES       => Token::Costumes,
        SOUNDS         => Token::Sounds,
        LOCAL          => Token::Local,
        PROC           => Token::Proc,
        NOWARP         => Token::NoWarp,
        ON             => Token::On,
        ONFLAG         => Token::OnFlag,
        ONKEY          => Token::OnKey,
        ONCLICK        => Token::OnClick,
        ONBACKDROP     => Token::OnBackdrop,
        ONLOUDNESS     => Token::OnLoudness,
        ONTIMER        => Token::OnTimer,
        ONCLONE        => Token::OnClone,
        IF             => Token::If,
        ELSE           => Token::Else,
        ELIF           => Token::Elif,
        UNTIL          => Token::Until,
        FOREVER        => Token::Forever,
        REPEAT         => Token::Repeat,
        ","            => Token::Comma,
        "("            => Token::LParen,
        ")"            => Token::RParen,
        "{"            => Token::LBrace,
        "}"            => Token::RBrace,
        "="            => Token::Assign,
        "=="           => Token::Eq,
        "++"           => Token::Increment,
        "--"           => Token::Decrement,
        "+="           => Token::AssignAdd,
        "-="           => Token::AssignSubtract,
        "*="           => Token::AssignMultiply,
        "/="           => Token::AssignDivide,
        "//="           => Token::AssignFloorDiv,
        "%="           => Token::AssignModulo,
        "&="           => Token::AssignJoin,
        "["            => Token::LBracket,
        "]"            => Token::RBracket,
        "."            => Token::Dot,
        "!="           => Token::Ne,
        "<"            => Token::Lt,
        ">"            => Token::Gt,
        "<="           => Token::Le,
        ">="           => Token::Ge,
        NOT            => Token::Not,
        AND            => Token::And,
        OR             => Token::Or,
        IN             => Token::In,
        "&"            => Token::Amp,
        "+"            => Token::Plus,
        "-"            => Token::Minus,
        "*"            => Token::Star,
        "/"            => Token::Slash,
        "//"            => Token::FloorDiv,
        "%"            => Token::Percent,
        ";"            => Token::Semicolon,
        LENGTH         => Token::Length,
        ROUND          => Token::Round,
        ABS            => Token::Abs,
        FLOOR          => Token::Floor,
        CEIL           => Token::Ceil,
        SQRT           => Token::Sqrt,
        SIN            => Token::Sin,
        COS            => Token::Cos,
        TAN            => Token::Tan,
        ASIN           => Token::Asin,
        ACOS           => Token::Acos,
        ATAN           => Token::Atan,
        LN             => Token::Ln,
        LOG            => Token::Log,
        ANTILN         => Token::Antiln,
        ANTILOG        => Token::Antilog,
        SHOW           => Token::Show,
        HIDE           => Token::Hide,
        ADD            => Token::Add,
        TO             => Token::To,
        DELETE         => Token::Delete,
        INSERT         => Token::Insert,
        AT             => Token::At,
        OF             => Token::Of,
        AS             => Token::As,
        ENUM           => Token::Enum,
        TRUE           => Token::True,
        FALSE          => Token::False,
    }
}
